{
	"info": {
		"_postman_id": "6e736a19-2a1a-460f-82bc-00a84d7c3f8c",
		"name": "Cookbook API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38881094"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token\", pm.response.json().token);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, role, and token\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('role');",
									"    pm.expect(responseData).to.have.property('token');",
									"});",
									"",
									"",
									"pm.test(\"Role is a valid integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.role).to.be.a('number', \"Role should be a valid integer\");",
									"});",
									"",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"admin@mail.com\",\r\n  \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7205/api/Authentication/login",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Authentication",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the user object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user).to.be.an('object');",
									"        pm.expect(user.id).to.be.a('number');",
									"        pm.expect(user.name).to.be.a('string');",
									"        pm.expect(user.email).to.be.a('string');",
									"        pm.expect(user.password).to.be.a('string');",
									"        pm.expect(user.role).to.be.a('number');",
									"        pm.expect(user.favoriteRecipes).to.be.an('array');",
									"        pm.expect(user.comments).to.be.an('array');",
									"        pm.expect(user.isBlocked).to.be.a('boolean');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"FavoriteRecipes and Comments arrays are present and empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user.favoriteRecipes).to.be.an('array').that.is.empty;",
									"        pm.expect(user.comments).to.be.an('array').that.is.empty;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/User",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"User"
							]
						}
					},
					"response": [
						{
							"name": "Get All Users",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/User",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"User"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:12:21 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Regular User\",\n        \"email\": \"user@mail.com\",\n        \"password\": \"AQAAAAIAAYagAAAAEFj3Md6jOZHs41jexBMgYBTIRw3CSGun/Jye/HT9dNnEPnnwl2RsPLOtIBle9jfzLA==\",\n        \"role\": 1,\n        \"favoriteRecipes\": [],\n        \"comments\": [],\n        \"isBlocked\": false\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Admin User\",\n        \"email\": \"admin@mail.com\",\n        \"password\": \"AQAAAAIAAYagAAAAECz2jVq5vMy8f/Qdt5knwusT6jlM0CDoy/OAI5WdfAQJHc4GLuETLNQZd15LNyHssw==\",\n        \"role\": 2,\n        \"favoriteRecipes\": [],\n        \"comments\": [],\n        \"isBlocked\": false\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Antonio\",\n        \"email\": \"ab@mail.com\",\n        \"password\": \"AQAAAAIAAYagAAAAEKMgyAPvtVMgr2ewR7vgCXQEVvll3O7pOg7AIf5FIupXM6vn+vp3IK4zBlyuwZJa/Q==\",\n        \"role\": 1,\n        \"favoriteRecipes\": [],\n        \"comments\": [],\n        \"isBlocked\": false\n    }\n]"
						}
					]
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('email');",
									"    pm.expect(responseData).to.have.property('password');",
									"    pm.expect(responseData).to.have.property('role');",
									"    pm.expect(responseData).to.have.property('favoriteRecipes');",
									"    pm.expect(responseData).to.have.property('comments');",
									"    pm.expect(responseData).to.have.property('isBlocked');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.email).to.be.a('string');",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"});",
									"",
									"",
									"pm.test(\"Password is not empty and meets the required criteria\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.password).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Password should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Favorite recipes and comments arrays are present and empty if no data is available\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.favoriteRecipes).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.comments).to.exist.and.to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/User/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"User",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Get User by ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/User/1",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"User",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:12:40 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Regular User\",\n    \"email\": \"user@mail.com\",\n    \"password\": \"AQAAAAIAAYagAAAAEFj3Md6jOZHs41jexBMgYBTIRw3CSGun/Jye/HT9dNnEPnnwl2RsPLOtIBle9jfzLA==\",\n    \"role\": 1,\n    \"favoriteRecipes\": [],\n    \"comments\": [],\n    \"isBlocked\": false\n}"
						}
					]
				},
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id field should exist and be a number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.id).to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
									"});",
									"",
									"",
									"pm.test(\"Favorite recipes array is present and empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.have.property('favoriteRecipes').that.is.an('array').and.to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/User/1/registered",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"User",
								"1",
								"registered"
							]
						}
					},
					"response": [
						{
							"name": "Get User Profile",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/User/1/registered",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"User",
										"1",
										"registered"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:13:32 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Regular User\",\n    \"email\": \"user@mail.com\",\n    \"password\": \"AQAAAAIAAYagAAAAEFj3Md6jOZHs41jexBMgYBTIRw3CSGun/Jye/HT9dNnEPnnwl2RsPLOtIBle9jfzLA==\",\n    \"role\": 1,\n    \"favoriteRecipes\": [],\n    \"comments\": [],\n    \"isBlocked\": false\n}"
						}
					]
				},
				{
					"name": "Get User Favorites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item).to.include.all.keys('id', 'name', 'instructions', 'ingredients', 'categoryId', 'difficulty', 'duration', 'isApproved', 'submissionDate');",
									"    });",
									"})",
									"",
									"pm.test('Name, instructions, and ingredients are non-empty strings', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (recipe) {",
									"        pm.expect(recipe.name).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Name should not be empty');",
									"        pm.expect(recipe.instructions).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Instructions should not be empty');",
									"        pm.expect(recipe.ingredients).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Ingredients should not be empty');",
									"    });",
									"})",
									"",
									"pm.test('CategoryId is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.categoryId).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/User/1/favorites",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"User",
								"1",
								"favorites"
							]
						}
					},
					"response": [
						{
							"name": "Get User Favorites",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/User/1/favorites",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"User",
										"1",
										"favorites"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:14:26 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Spaghetti Bolognese\",\n        \"instructions\": \"1. Cook spaghetti. 2. Make bolognese sauce. 3. Combine and serve.\",\n        \"ingredients\": \"Spaghetti, Ground beef, Tomato sauce, Onions, Garlic\",\n        \"categoryId\": 1,\n        \"category\": null,\n        \"difficulty\": \"Medium\",\n        \"duration\": 30,\n        \"comments\": null,\n        \"ratings\": null,\n        \"favorites\": null,\n        \"isApproved\": true,\n        \"submissionDate\": \"2024-10-22T16:56:46.4547683\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Chocolate Chip Cookies\",\n        \"instructions\": \"1. Mix ingredients. 2. Form cookies. 3. Bake for 10-12 minutes.\",\n        \"ingredients\": \"Flour, Sugar, Butter, Chocolate chips, Eggs\",\n        \"categoryId\": 2,\n        \"category\": null,\n        \"difficulty\": \"Easy\",\n        \"duration\": 25,\n        \"comments\": null,\n        \"ratings\": null,\n        \"favorites\": null,\n        \"isApproved\": true,\n        \"submissionDate\": \"2024-10-22T16:56:46.454769\"\n    }\n]"
						}
					]
				},
				{
					"name": "Add Favorite Recipe",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "3",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7205/api/User/1/favorites",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"User",
								"1",
								"favorites"
							]
						}
					},
					"response": [
						{
							"name": "Add Favorite Recipe",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "3",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:7205/api/User/1/favorites",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"User",
										"1",
										"favorites"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:15:45 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the user object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.name).to.be.a('string');",
									"    pm.expect(responseData.email).to.be.a('string');",
									"    pm.expect(responseData.password).to.be.a('string');",
									"    pm.expect(responseData.role).to.be.a('number');",
									"    pm.expect(responseData.favoriteRecipes).to.be.an('array');",
									"    pm.expect(responseData.comments).to.be.an('array');",
									"    pm.expect(responseData.isBlocked).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
									"});",
									"",
									"",
									"pm.test(\"Favorite recipes array should be present and empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('favoriteRecipes').that.is.an('array').and.to.be.empty;",
									"});",
									"",
									"pm.test(\"Comments array should be present and empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('comments').that.is.an('array').and.to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test User\",\r\n  \"email\": \"testuser@example.com\",\r\n  \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7205/api/User/register",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"User",
								"register"
							]
						}
					},
					"response": [
						{
							"name": "Register User",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Test User\",\r\n  \"email\": \"testuser@example.com\",\r\n  \"password\": \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:7205/api/User/register",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"User",
										"register"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:16:31 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 3,\n    \"name\": \"Test User\",\n    \"email\": \"testuser@example.com\",\n    \"password\": \"AQAAAAIAAYagAAAAEGSwgh6yTIlVqQ35FIsSfa7+JyvzbVfsmNtyMp7Gr52DSpl2FhOj6QOoaM1gPEa5HA==\",\n    \"role\": 1,\n    \"favoriteRecipes\": [],\n    \"comments\": [],\n    \"isBlocked\": false\n}"
						}
					]
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 3,\r\n  \"name\": \"Updated User\",\r\n  \"email\": \"updateduser@mail.com\",\r\n  \"password\": \"newpassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7205/api/User/3",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"User",
								"3"
							]
						}
					},
					"response": [
						{
							"name": "Update User",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 3,\r\n  \"name\": \"Updated User\",\r\n  \"email\": \"updateduser@mail.com\",\r\n  \"password\": \"newpassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:7205/api/User/3",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"User",
										"3"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:18:37 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Block User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}\n",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://localhost:7205/api/User/1/block",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"User",
								"1",
								"block"
							]
						}
					},
					"response": [
						{
							"name": "Block User",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}\n",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://localhost:7205/api/User/3/block",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"User",
										"3",
										"block"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:19:36 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Unblock User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://localhost:7205/api/User/1/unblock",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"User",
								"1",
								"unblock"
							]
						}
					},
					"response": [
						{
							"name": "https://localhost:7205/api/User/1/unblock",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://localhost:7205/api/User/1/unblock",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"User",
										"1",
										"unblock"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:20:12 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Remove User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/User/4",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"User",
								"4"
							]
						}
					},
					"response": [
						{
							"name": "Remove User",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/User/4",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"User",
										"4"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:21:28 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Recipes",
			"item": [
				{
					"name": "Get All Recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Content-Type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Validate the structure of the recipe object', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (recipe) {",
									"        pm.expect(recipe).to.be.an('object');",
									"        pm.expect(recipe).to.have.property('id');",
									"        pm.expect(recipe).to.have.property('name');",
									"        pm.expect(recipe).to.have.property('instructions');",
									"        pm.expect(recipe).to.have.property('ingredients');",
									"        pm.expect(recipe).to.have.property('categoryId');",
									"        pm.expect(recipe).to.have.property('category');",
									"        pm.expect(recipe).to.have.property('difficulty');",
									"        pm.expect(recipe).to.have.property('duration');",
									"        pm.expect(recipe).to.have.property('comments');",
									"        pm.expect(recipe).to.have.property('ratings');",
									"        pm.expect(recipe).to.have.property('favorites');",
									"        pm.expect(recipe).to.have.property('isApproved');",
									"        pm.expect(recipe).to.have.property('submissionDate');",
									"    });",
									"})",
									"",
									"pm.test('Duration is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    responseData.forEach(function (recipe) {",
									"        pm.expect(recipe.duration).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Recipes",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Recipes"
							]
						}
					},
					"response": [
						{
							"name": "Get All Recipes",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Recipes",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Recipes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:26:33 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Spaghetti Bolognese\",\n        \"instructions\": \"1. Cook spaghetti. 2. Make bolognese sauce. 3. Combine and serve.\",\n        \"ingredients\": \"Spaghetti, Ground beef, Tomato sauce, Onions, Garlic\",\n        \"categoryId\": 1,\n        \"category\": null,\n        \"difficulty\": \"Medium\",\n        \"duration\": 30,\n        \"comments\": null,\n        \"ratings\": null,\n        \"favorites\": null,\n        \"isApproved\": true,\n        \"submissionDate\": \"2024-10-22T16:56:46.4547683\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Chocolate Chip Cookies\",\n        \"instructions\": \"1. Mix ingredients. 2. Form cookies. 3. Bake for 10-12 minutes.\",\n        \"ingredients\": \"Flour, Sugar, Butter, Chocolate chips, Eggs\",\n        \"categoryId\": 2,\n        \"category\": null,\n        \"difficulty\": \"Easy\",\n        \"duration\": 25,\n        \"comments\": null,\n        \"ratings\": null,\n        \"favorites\": null,\n        \"isApproved\": true,\n        \"submissionDate\": \"2024-10-22T16:56:46.454769\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Caprese Salad\",\n        \"instructions\": \"1. Slice tomatoes and mozzarella. 2. Arrange on plate with basil. 3. Drizzle with olive oil and balsamic.\",\n        \"ingredients\": \"Tomatoes, Fresh mozzarella, Basil, Olive oil, Balsamic vinegar\",\n        \"categoryId\": 3,\n        \"category\": null,\n        \"difficulty\": \"Easy\",\n        \"duration\": 10,\n        \"comments\": null,\n        \"ratings\": null,\n        \"favorites\": null,\n        \"isApproved\": true,\n        \"submissionDate\": \"2024-10-22T16:56:46.4547693\"\n    }\n]"
						}
					]
				},
				{
					"name": "Search Recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(recipe) {",
									"        pm.expect(recipe.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(recipe) {",
									"    pm.expect(recipe.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Instructions and ingredients must be non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  ",
									"  responseData.forEach(function(recipe) {",
									"    pm.expect(recipe.instructions).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Instructions should not be empty\");",
									"    pm.expect(recipe.ingredients).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Ingredients should not be empty\");",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7205/api/Recipes/search?name=Cookie",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Recipes",
								"search"
							],
							"query": [
								{
									"key": "name",
									"value": "Cookie"
								}
							]
						}
					},
					"response": [
						{
							"name": "Search Recipes Partial Search Term \"Cookie\"",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:7205/api/Recipes/search?name=Cookie",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Recipes",
										"search"
									],
									"query": [
										{
											"key": "name",
											"value": "Cookie"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:34:51 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 2,\n        \"name\": \"Chocolate Chip Cookies\",\n        \"instructions\": \"1. Mix ingredients. 2. Form cookies. 3. Bake for 10-12 minutes.\",\n        \"ingredients\": \"Flour, Sugar, Butter, Chocolate chips, Eggs\",\n        \"categoryId\": 2,\n        \"category\": null,\n        \"difficulty\": \"Easy\",\n        \"duration\": 25,\n        \"comments\": null,\n        \"ratings\": null,\n        \"favorites\": null,\n        \"isApproved\": true,\n        \"submissionDate\": \"2024-10-22T16:56:46.454769\"\n    }\n]"
						}
					]
				},
				{
					"name": "Get Recipe by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"pm.test('Content-Type header is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys('id', 'name', 'instructions', 'ingredients', 'categoryId', 'difficulty', 'duration', 'isApproved', 'submissionDate');",
									"})",
									"",
									"pm.test('Duration is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.duration).to.be.a('number');",
									"    pm.expect(responseData.duration).to.be.at.least(0, 'Duration should be a non-negative integer');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Recipes/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Recipes",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Get Recipe by ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Recipes/1",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Recipes",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:29:26 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Spaghetti Bolognese\",\n    \"instructions\": \"1. Cook spaghetti. 2. Make bolognese sauce. 3. Combine and serve.\",\n    \"ingredients\": \"Spaghetti, Ground beef, Tomato sauce, Onions, Garlic\",\n    \"categoryId\": 1,\n    \"category\": null,\n    \"difficulty\": \"Medium\",\n    \"duration\": 30,\n    \"comments\": null,\n    \"ratings\": null,\n    \"favorites\": null,\n    \"isApproved\": true,\n    \"submissionDate\": \"2024-10-22T16:56:46.4547683\"\n}"
						}
					]
				},
				{
					"name": "Create Recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Name must be a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Name should not be empty');",
									"})",
									"",
									"pm.test('Category ID is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.categoryId).to.be.a('number').and.to.satisfy(val => val >= 0, 'Category ID should be a non-negative integer');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"New Recipe\",\r\n  \"instructions\": \"Cook it well.\",\r\n  \"ingredients\": \"Ingredient1, Ingredient2\",\r\n  \"duration\": 30,\r\n  \"difficulty\": \"Easy\",\r\n  \"categoryId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7205/api/Recipes",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Recipes"
							]
						}
					},
					"response": [
						{
							"name": "Create Recipe",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"New Recipe\",\r\n  \"instructions\": \"Cook it well.\",\r\n  \"ingredients\": \"Ingredient1, Ingredient2\",\r\n  \"duration\": 30,\r\n  \"difficulty\": \"Easy\",\r\n  \"categoryId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:7205/api/Recipes",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Recipes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:30:35 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 5,\n    \"name\": \"New Recipe\",\n    \"instructions\": \"Cook it well.\",\n    \"ingredients\": \"Ingredient1, Ingredient2\",\n    \"categoryId\": 1,\n    \"category\": null,\n    \"difficulty\": \"Easy\",\n    \"duration\": 30,\n    \"comments\": null,\n    \"ratings\": null,\n    \"favorites\": null,\n    \"isApproved\": false,\n    \"submissionDate\": \"2024-10-23T23:30:36.538768Z\"\n}"
						}
					]
				},
				{
					"name": "Recipe Approval",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Recipes/4/approve",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Recipes",
								"4",
								"approve"
							]
						}
					},
					"response": [
						{
							"name": "Recipe Approval",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Recipes/4/approve",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Recipes",
										"4",
										"approve"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:31:42 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Update Recipe",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Updated Recipe Name\",\r\n    \"instructions\": \"Updated instructions\",\r\n    \"ingredients\": \"Updated ingredients list\",\r\n    \"categoryId\": 1,\r\n    \"difficulty\": \"Medium\",\r\n    \"duration\": 30\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7205/api/Recipes/4",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Recipes",
								"4"
							]
						}
					},
					"response": [
						{
							"name": "Update Recipe",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated Recipe Name\",\r\n    \"instructions\": \"Updated instructions\",\r\n    \"ingredients\": \"Updated ingredients list\",\r\n    \"categoryId\": 1,\r\n    \"difficulty\": \"Medium\",\r\n    \"duration\": 30\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:7205/api/Recipes/8",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Recipes",
										"8"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Mon, 21 Oct 2024 18:56:26 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 8,\n    \"name\": \"Updated Recipe Name\",\n    \"instructions\": \"Updated instructions\",\n    \"ingredients\": \"Updated ingredients list\",\n    \"categoryId\": 1,\n    \"category\": null,\n    \"difficulty\": \"Medium\",\n    \"duration\": 30,\n    \"comments\": null,\n    \"ratings\": null,\n    \"favorites\": null,\n    \"isApproved\": true,\n    \"submissionDate\": \"2024-10-21T18:30:22.4412016\"\n}"
						},
						{
							"name": "Update Recipe",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated Recipe Name\",\r\n    \"instructions\": \"Updated instructions\",\r\n    \"ingredients\": \"Updated ingredients list\",\r\n    \"categoryId\": 1,\r\n    \"difficulty\": \"Medium\",\r\n    \"duration\": 30\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:7205/api/Recipes/4",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Recipes",
										"4"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:32:36 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 4,\n    \"name\": \"Updated Recipe Name\",\n    \"instructions\": \"Updated instructions\",\n    \"ingredients\": \"Updated ingredients list\",\n    \"categoryId\": 1,\n    \"category\": null,\n    \"difficulty\": \"Medium\",\n    \"duration\": 30,\n    \"comments\": null,\n    \"ratings\": null,\n    \"favorites\": null,\n    \"isApproved\": false,\n    \"submissionDate\": \"2024-10-23T23:30:36.538768\"\n}"
						}
					]
				},
				{
					"name": "Remove Recipe",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Recipes/4",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Recipes",
								"4"
							]
						}
					},
					"response": [
						{
							"name": "Remove Recipe",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Recipes/4",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Recipes",
										"4"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:26:28 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "Get All Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id and name\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('name');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Recipes field should be null or an array\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(category) {",
									"    pm.expect(category.recipes).to.satisfy(function (value) {",
									"      return value === null || Array.isArray(value);",
									"    });",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(category){",
									"        pm.expect(category.id).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Category",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Category"
							]
						}
					},
					"response": [
						{
							"name": "Get All Categories",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Category",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Category"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:45:32 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Main Course\",\n        \"recipes\": null\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Dessert\",\n        \"recipes\": null\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Appetizer\",\n        \"recipes\": null\n    }\n]"
						}
					]
				},
				{
					"name": "Get Category by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id and name\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('id');",
									"  pm.expect(responseData).to.have.property('name');",
									"});",
									"",
									"",
									"pm.test(\"Recipes field should be null or an array\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.recipes).to.satisfy((val) => val === null || Array.isArray(val));",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Category/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Category",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Get Category by ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Category/1",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Category",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:46:09 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"name\": \"Main Course\",\n    \"recipes\": null\n}"
						}
					]
				},
				{
					"name": "Create Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id field is present and not null\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.have.property('id').that.is.not.null;",
									"});",
									"",
									"",
									"pm.test(\"Name field must be a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Recipes field should be either null or an array\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.recipes).to.satisfy((value) => {",
									"    return value === null || Array.isArray(value);",
									"  }, \"Recipes field should be either null or an array\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"New Category Name\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7205/api/Category",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Category"
							]
						}
					},
					"response": [
						{
							"name": "Create Category",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"New Category Name\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:7205/api/Category",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Category"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:47:09 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 4,\n    \"name\": \"New Category Name\",\n    \"recipes\": null\n}"
						}
					]
				},
				{
					"name": "Remove Category",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Category/4",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Category",
								"4"
							]
						}
					},
					"response": [
						{
							"name": "Remove Category",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Category/4",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Category",
										"4"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:48:13 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		},
		{
			"name": "Comment",
			"item": [
				{
					"name": "Get all Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (comment) {",
									"        pm.expect(comment).to.have.property('id');",
									"        pm.expect(comment).to.have.property('content');",
									"        pm.expect(comment).to.have.property('createdAt');",
									"        pm.expect(comment).to.have.property('recipeId');",
									"        pm.expect(comment).to.have.property('recipe');",
									"        pm.expect(comment).to.have.property('userId');",
									"        pm.expect(comment).to.have.property('user');",
									"    });",
									"})",
									"",
									"pm.test('Content-Type header is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Comment",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Comment"
							]
						}
					},
					"response": [
						{
							"name": "Get all Comments",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Comment",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Comment"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:40:09 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"content\": \"Great recipe!\",\n        \"createdAt\": \"2024-10-22T16:56:46.4547752\",\n        \"recipeId\": 1,\n        \"recipe\": null,\n        \"userId\": 1,\n        \"user\": null\n    },\n    {\n        \"id\": 2,\n        \"content\": \"My family loved it!\",\n        \"createdAt\": \"2024-10-22T16:56:46.4547755\",\n        \"recipeId\": 1,\n        \"recipe\": null,\n        \"userId\": 2,\n        \"user\": null\n    },\n    {\n        \"id\": 3,\n        \"content\": \"Best cookies ever!\",\n        \"createdAt\": \"2024-10-22T16:56:46.4547757\",\n        \"recipeId\": 2,\n        \"recipe\": null,\n        \"userId\": 1,\n        \"user\": null\n    },\n    {\n        \"id\": 4,\n        \"content\": \"Simple and delicious!\",\n        \"createdAt\": \"2024-10-22T16:56:46.4547759\",\n        \"recipeId\": 3,\n        \"recipe\": null,\n        \"userId\": 2,\n        \"user\": null\n    }\n]"
						}
					]
				},
				{
					"name": "Get Comment by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Content type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('content');",
									"    pm.expect(responseData).to.have.property('createdAt');",
									"    pm.expect(responseData).to.have.property('recipeId');",
									"    pm.expect(responseData).to.have.property('recipe');",
									"    pm.expect(responseData).to.have.property('userId');",
									"    pm.expect(responseData).to.have.property('user');",
									"})",
									"",
									"pm.test('Recipe and user properties are either null or contain valid data', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('recipe').that.satisfies(value => {",
									"        return value === null || typeof value === 'object' && Object.keys(value).length > 0;",
									"    });",
									"    pm.expect(responseData).to.have.property('user').that.satisfies(value => {",
									"        return value === null || typeof value === 'object' && Object.keys(value).length > 0;",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Comment/2",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Comment",
								"2"
							]
						}
					},
					"response": [
						{
							"name": "Get by CommentId",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Comment/2",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Comment",
										"2"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:41:03 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 2,\n    \"content\": \"My family loved it!\",\n    \"createdAt\": \"2024-10-22T16:56:46.4547755\",\n    \"recipeId\": 1,\n    \"recipe\": null,\n    \"userId\": 2,\n    \"user\": null\n}"
						}
					]
				},
				{
					"name": "Create Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Content-Type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('content');",
									"    pm.expect(responseData).to.have.property('createdAt');",
									"    pm.expect(responseData).to.have.property('recipeId');",
									"    pm.expect(responseData).to.have.property('recipe');",
									"    pm.expect(responseData).to.have.property('userId');",
									"    pm.expect(responseData).to.have.property('user');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"content\": \"This is a sample comment.\",\r\n  \"userId\": 1,\r\n  \"recipeId\": 3 \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7205/api/Comment",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Comment"
							]
						}
					},
					"response": [
						{
							"name": "Create Comment",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"content\": \"This is a sample comment.\",\r\n  \"userId\": 1,\r\n  \"recipeId\": 3 \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:7205/api/Comment",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Comment"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:42:19 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 5,\n    \"content\": \"This is a sample comment.\",\n    \"createdAt\": \"0001-01-01T00:00:00\",\n    \"recipeId\": 3,\n    \"recipe\": null,\n    \"userId\": 1,\n    \"user\": null\n}"
						}
					]
				},
				{
					"name": "Remove Comment",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Comment/5",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Comment",
								"5"
							]
						}
					},
					"response": [
						{
							"name": "Remove Comment",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Comment/5",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Comment",
										"5"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:44:05 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		},
		{
			"name": "Rating",
			"item": [
				{
					"name": "Get All Ratings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id, stars, recipeId, and userId fields exist in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(entry => {",
									"        pm.expect(entry).to.have.property('id');",
									"        pm.expect(entry).to.have.property('stars');",
									"        pm.expect(entry).to.have.property('recipeId');",
									"        pm.expect(entry).to.have.property('userId');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Recipe and user fields are present and null\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(item) {",
									"    pm.expect(item.recipe).to.equal(null, \"Recipe should be null\");",
									"    pm.expect(item.user).to.equal(null, \"User should be null\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Response contains an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Rating",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Rating"
							]
						}
					},
					"response": [
						{
							"name": "Get All Ratings",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Rating",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Rating"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:50:41 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"stars\": 5,\n        \"recipeId\": 1,\n        \"recipe\": null,\n        \"userId\": 1,\n        \"user\": null\n    },\n    {\n        \"id\": 2,\n        \"stars\": 1,\n        \"recipeId\": 1,\n        \"recipe\": null,\n        \"userId\": 2,\n        \"user\": null\n    },\n    {\n        \"id\": 3,\n        \"stars\": 5,\n        \"recipeId\": 2,\n        \"recipe\": null,\n        \"userId\": 1,\n        \"user\": null\n    },\n    {\n        \"id\": 4,\n        \"stars\": 5,\n        \"recipeId\": 3,\n        \"recipe\": null,\n        \"userId\": 2,\n        \"user\": null\n    },\n    {\n        \"id\": 5,\n        \"stars\": 4,\n        \"recipeId\": 2,\n        \"recipe\": null,\n        \"userId\": 3,\n        \"user\": null\n    },\n    {\n        \"id\": 6,\n        \"stars\": 5,\n        \"recipeId\": 1,\n        \"recipe\": null,\n        \"userId\": 3,\n        \"user\": null\n    }\n]"
						}
					]
				},
				{
					"name": "Get Rating by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys('id', 'stars', 'recipeId', 'recipe', 'userId', 'user');",
									"});",
									"",
									"",
									"pm.test(\"Stars is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.stars).to.be.a('number');",
									"  pm.expect(responseData.stars).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Recipe should be either null or an object\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.recipe).to.satisfy((val) => val === null || typeof val === 'object');",
									"});",
									"",
									"",
									"pm.test(\"User is either null or an object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.user).to.satisfy((user) => {",
									"        return user === null || typeof user === 'object';",
									"    }, \"User should be either null or an object\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Rating/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Rating",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Get Rating by ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Rating/1",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Rating",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:51:17 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"stars\": 5,\n    \"recipeId\": 1,\n    \"recipe\": null,\n    \"userId\": 1,\n    \"user\": null\n}"
						}
					]
				},
				{
					"name": "Create Rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('stars');",
									"    pm.expect(responseData).to.have.property('recipeId');",
									"    pm.expect(responseData).to.have.property('recipe');",
									"    pm.expect(responseData).to.have.property('userId');",
									"    pm.expect(responseData).to.have.property('user');",
									"})",
									"",
									"pm.test('Stars is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.stars).to.be.a('number');",
									"    pm.expect(responseData.stars).to.be.at.least(0, 'Stars should be a non-negative integer');",
									"})",
									"",
									"pm.test('Id, recipeId, and userId are non-negative integers', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.recipeId).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.userId).to.be.a('number').and.to.be.at.least(0);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"recipeId\": 3, \r\n  \"userId\": 1,  \r\n  \"stars\": 5     \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7205/api/Rating",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Rating"
							]
						}
					},
					"response": [
						{
							"name": "Create Rating",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"recipeId\": 3, \r\n  \"userId\": 1,  \r\n  \"stars\": 5     \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:7205/api/Rating",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Rating"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:53:14 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 8,\n    \"stars\": 0,\n    \"recipeId\": 3,\n    \"recipe\": null,\n    \"userId\": 1,\n    \"user\": null\n}"
						}
					]
				},
				{
					"name": "Update Rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('stars');",
									"    pm.expect(responseData).to.have.property('recipeId');",
									"    pm.expect(responseData).to.have.property('recipe');",
									"    pm.expect(responseData).to.have.property('userId');",
									"    pm.expect(responseData).to.have.property('user');",
									"})",
									"",
									"pm.test('Stars is a non-negative integer', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.stars).to.be.a('number').and.to.satisfy(val => val >= 0, 'Stars must be a non-negative integer');",
									"})",
									"",
									"pm.test('Content-Type header is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"stars\": 1, \r\n    \"recipeId\": 1,\r\n    \"userId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7205/api/Rating/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Rating",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Update Rating",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 1,\r\n    \"stars\": 1, \r\n    \"recipeId\": 1,\r\n    \"userId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:7205/api/Rating/1",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Rating",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:55:19 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"stars\": 1,\n    \"recipeId\": 1,\n    \"recipe\": null,\n    \"userId\": 1,\n    \"user\": null\n}"
						}
					]
				},
				{
					"name": "Get Ratings by Recipe ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Verify that the response has the required fields', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('stars');",
									"        pm.expect(item).to.have.property('recipeId');",
									"        pm.expect(item).to.have.property('recipe');",
									"        pm.expect(item).to.have.property('userId');",
									"        pm.expect(item).to.have.property('user');",
									"    });",
									"})",
									"",
									"pm.test('Stars should be within the valid range', function () {",
									"    const responseData = pm.response.json();",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.stars).to.be.a('number');",
									"        pm.expect(item.stars).to.be.at.least(0);",
									"        pm.expect(item.stars).to.be.at.most(5);",
									"    });",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Rating/recipe/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Rating",
								"recipe",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Get Ratings by Recipe ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Rating/recipe/1",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Rating",
										"recipe",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:56:17 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"stars\": 1,\n        \"recipeId\": 1,\n        \"recipe\": null,\n        \"userId\": 1,\n        \"user\": null\n    },\n    {\n        \"id\": 2,\n        \"stars\": 1,\n        \"recipeId\": 1,\n        \"recipe\": null,\n        \"userId\": 2,\n        \"user\": null\n    },\n    {\n        \"id\": 6,\n        \"stars\": 5,\n        \"recipeId\": 1,\n        \"recipe\": null,\n        \"userId\": 3,\n        \"user\": null\n    }\n]"
						}
					]
				},
				{
					"name": "Get Rating Stats by Recipe ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - averageRating and count\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('averageRating');",
									"    pm.expect(responseData).to.have.property('count');",
									"});",
									"",
									"",
									"pm.test(\"Average rating is a number within a valid range\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.averageRating).to.be.a('number');",
									"    pm.expect(responseData.averageRating).to.be.within(0, 5);",
									"});",
									"",
									"",
									"pm.test(\"Count is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.count).to.exist.and.to.be.a('number').and.to.satisfy((count) => count >= 0, \"Count should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Rating/stats/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Rating",
								"stats",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Get Rating Stats by Recipe ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Rating/stats/1",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Rating",
										"stats",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:57:23 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"averageRating\": 2.3333333333333335,\n    \"count\": 3\n}"
						}
					]
				},
				{
					"name": "Remove Rating",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Rating/8",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Rating",
								"8"
							]
						}
					},
					"response": [
						{
							"name": "Remove Rating",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Rating/8",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Rating",
										"8"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:58:07 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		},
		{
			"name": "Favorite",
			"item": [
				{
					"name": "Get All Favorites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response Content-Type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test('Validate the array structure and its elements', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('recipeId');",
									"        pm.expect(item).to.have.property('recipe');",
									"        pm.expect(item).to.have.property('userId');",
									"        pm.expect(item).to.have.property('user');",
									"    });",
									"})",
									"",
									"pm.test('Id, recipeId, and userId fields are present and have valid values', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item).to.have.property('id').that.is.a('number');",
									"        pm.expect(item).to.have.property('recipeId').that.is.a('number');",
									"        pm.expect(item).to.have.property('userId').that.is.a('number');",
									"    });",
									"})",
									"",
									"pm.test('Response time is less than 200ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Favorite",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Favorite"
							]
						}
					},
					"response": [
						{
							"name": "Get All Favorites",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Favorite",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Favorite"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:58:59 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"recipeId\": 1,\n        \"recipe\": null,\n        \"userId\": 1,\n        \"user\": null\n    },\n    {\n        \"id\": 2,\n        \"recipeId\": 2,\n        \"recipe\": null,\n        \"userId\": 1,\n        \"user\": null\n    },\n    {\n        \"id\": 3,\n        \"recipeId\": 3,\n        \"recipe\": null,\n        \"userId\": 2,\n        \"user\": null\n    },\n    {\n        \"id\": 4,\n        \"recipeId\": 2,\n        \"recipe\": null,\n        \"userId\": 2,\n        \"user\": null\n    },\n    {\n        \"id\": 5,\n        \"recipeId\": 1,\n        \"recipe\": null,\n        \"userId\": 3,\n        \"user\": null\n    },\n    {\n        \"id\": 6,\n        \"recipeId\": 2,\n        \"recipe\": null,\n        \"userId\": 3,\n        \"user\": null\n    },\n    {\n        \"id\": 7,\n        \"recipeId\": 3,\n        \"recipe\": null,\n        \"userId\": 3,\n        \"user\": null\n    },\n    {\n        \"id\": 8,\n        \"recipeId\": 3,\n        \"recipe\": null,\n        \"userId\": 1,\n        \"user\": null\n    }\n]"
						}
					]
				},
				{
					"name": "Get Favorite by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, recipeId, userId\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('recipeId');",
									"    pm.expect(responseData).to.have.property('userId');",
									"});",
									"",
									"",
									"pm.test(\"Recipe and user fields are either null or an object\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.recipe).to.satisfy((value) => value === null || typeof value === 'object');",
									"  pm.expect(responseData.user).to.satisfy((value) => value === null || typeof value === 'object');",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id, recipeId, and userId are non-negative integers\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('number').and.to.satisfy((value) => value >= 0, \"Id should be a non-negative integer\");",
									"    pm.expect(responseData.recipeId).to.be.a('number').and.to.satisfy((value) => value >= 0, \"RecipeId should be a non-negative integer\");",
									"    pm.expect(responseData.userId).to.be.a('number').and.to.satisfy((value) => value >= 0, \"UserId should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Favorite/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Favorite",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Get Favorite by ID",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Favorite/1",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Favorite",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Wed, 23 Oct 2024 23:59:29 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"recipeId\": 1,\n    \"recipe\": null,\n    \"userId\": 1,\n    \"user\": null\n}"
						}
					]
				},
				{
					"name": "Create Favorite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, recipeId, userId\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('recipeId');",
									"    pm.expect(responseData).to.have.property('userId');",
									"});",
									"",
									"",
									"pm.test(\"Recipe is either null or an object with expected fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.recipe).to.satisfy((recipe) => {",
									"    return recipe === null || (typeof recipe === 'object' && recipe.hasOwnProperty('id') && recipe.hasOwnProperty('name'));",
									"  }, \"Recipe should be null or an object with id and name\");",
									"});",
									"",
									"",
									"pm.test(\"User is either null or an object with the expected fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.user).to.satisfy((user) => {",
									"    return user === null || typeof user === 'object';",
									"  }, \"User should be either null or an object\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": 2,  \r\n  \"recipeId\": 1  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7205/api/Favorite",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Favorite"
							]
						}
					},
					"response": [
						{
							"name": "Create Favorite",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 2,  \r\n  \"recipeId\": 1  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:7205/api/Favorite",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Favorite"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Thu, 24 Oct 2024 00:00:48 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 9,\n    \"recipeId\": 1,\n    \"recipe\": null,\n    \"userId\": 2,\n    \"user\": null\n}"
						}
					]
				},
				{
					"name": "Remove Favorite",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:7205/api/Favorite/user/2/recipe/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7205",
							"path": [
								"api",
								"Favorite",
								"user",
								"2",
								"recipe",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Remove Favorite",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://localhost:7205/api/Favorite/user/2/recipe/1",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7205",
									"path": [
										"api",
										"Favorite",
										"user",
										"2",
										"recipe",
										"1"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 24 Oct 2024 00:01:43 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}